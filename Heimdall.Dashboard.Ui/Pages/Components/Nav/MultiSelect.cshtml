<template id="multiselect">
  <div ref="target" class="relative" aria-label="Select Environment"  title="Shift + N to filter namespace">
    <div tabindex="-1" :data-focus="hasFocus"
      class="h-9 w-full text-gray-200 items-center flex justify-end box-border cursor-pointer border border-white/[.4] rounded 
          bg-brand text-white/[.6] leading-snug outline-none 
          dark:bg-zinc-900 
          data-[focus=true]:border-white">
      
      <template v-if="values.length > 0">
        <input type="text" ref="input" id="nss" autocomplete="new-password" v-model="search" @@keyDown="handleKeypress" @@focus="foucsIn"
               class="bg-transparent w-full h-8 ml-3 outline-none text-gray-200 placeholder-white/[.6]"
               :placeholder="placeholder"
          :aria-expanded="isOpen"
          role="combobox"/>
        
      </template>
      
      <!-- Spinner -->
      <template v-if="values.length === 0">
        <div class="w-6 h-6 z-10 mr-3.5 animate-spin fill-white/[.6] flex-shrink-0 flex-grow-0" aria-hidden="true">
          <svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
            <path d="M456.433 371.72l-27.79-16.045c-7.192-4.152-10.052-13.136-6.487-20.636 25.82-54.328 23.566-118.602-6.768-171.03-30.265-52.529-84.802-86.621-144.76-91.424C262.35 71.922 256 64.953 256 56.649V24.56c0-9.31 7.916-16.609 17.204-15.96 81.795 5.717 156.412 51.902 197.611 123.408 41.301 71.385 43.99 159.096 8.042 232.792-4.082 8.369-14.361 11.575-22.424 6.92z">
            </path>
          </svg>
        </div>

      </template>

      <!-- Clear -->
      <template v-if="values.length > 0 && selected.length > 0">
        <span aria-hidden="true" tabindex="0" role="button" data-clear aria-roledescription="❎" @@click="handleClear"
              class="mr-1 relative z-10 opacity-40 text-white transition duration-300 flex-shrink-0 flex-grow-0 flex hover:opacity-80">
          <span class="w-6 h-6 py-px box-content inline-block">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </span>
        </span>
      </template>

      <!-- Caret -->
      <template v-if="values.length > 0 && selected.length === 0">
        <span class="w-6 h-6 py-px box-content mr-1 relative z-10 opacity-40 flex-shrink-0 flex-grow-0 transition-transform transform pointer-events-none" aria-hidden="true">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9" />
          </svg>
        </span>
      </template>
    </div>

    <!-- Options -->
    <div @@focusout="isOpen = false" tabindex="-1" data-ns="1"
         :class="isOpen ? 'visible' : 'hidden'"  
         class="max-h-60 absolute cursor-pointer -left-px -right-px transform translate-y-2 border border-gray-300 -mt-px overflow-y-auto z-50
       dark:[color-scheme:dark]
       bg-white flex flex-col rounded, dark:bg-zinc-900">
      
      <ul class="flex flex-col p-0 m-0 list-none" role="listbox">
        <template v-if="items.length > 0">
          <li v-for="(v, index) in items" @@click="handleOptionClick(v)" role="option" :id="'ns-' + index" :aria-selected="selected.includes(v)" :data-ns="v" :data-cursor="cursor === index" 
              class="py-1 px-1 flex aria-selected:font-medium aria-selected:text-black dark:aria-selected:text-white
                bg-white text-gray-600 hover:bg-blue-200 hover:text-blue-600
                data-[cursor=true]:bg-blue-200 data-[cursor=true]:text-blue-600
                dark:data-[cursor=true]:text-white dark:data-[cursor=true]:bg-zinc-700/[.9]
                dark:bg-zinc-900 dark:text-gray-400 dark:hover:text-white dark:hover:bg-zinc-700/[.9]">
            <template v-if="selected.includes(v)">
              <span class="absolute text-blue-600">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"/>
                </svg>
              </span>
            </template>
            <span class="ml-8">{{ v }}</span>
          </li>
        </template>
        <template v-else>
          <li class="py-1 px-1 flex bg-white text-gray-600 dark:bg-zinc-900 dark:text-gray-400">
            <span class="ml-8">...</span>
          </li>
        </template>

      </ul>
      
      <template v-if="values.length === 0" name="loading">
        <div class="py-1 px-1 text-gray-300 bg-brand dark:bg-zinc-800 text-left">
          Loading...
        </div>
      </template>
    </div>
  </div>
</template>

<script type="module">
import {ref, onMounted, onBeforeUnmount, computed} from 'vue';
import { onClickOutside } from '@@vueuse/core'

let setup = (props, ctx) => {
  const noOptions = ref(false);
  const isOpen = ref(false);
  const hasFocus = ref(false)
  const selected = useGlobalNamespaces();
  const cursor = ref(-1);
  const search = ref('');
  const target = ref(null)
  const input = ref(null);
  
  let items = computed(() => {
    if (search.value.length > 0){
      return props.values.filter(x => x.includes(search.value));
    }
    return props.values;
  })
  
  let placeholder = computed(() => selected.value.length > 0 ? `${selected.value.length} Selected` : 'Select namespaces')
  
  let setExclusive = (e) => {
    selected.value = [e]
  }

  let handleClear = (e) => {
    selected.value = []
    isOpen.value = false;
    search.value = '';
    e.stopPropagation();
  }
  
  let foucsIn = () => {
    if (isOpen.value || items.value.length === 0) return;
    
    isOpen.value = true;
    hasFocus.value = true;
  }

  let focusOut = () => {
    if (!isOpen.value && search.value.length === 0) return;
    
    isOpen.value = false;
    hasFocus.value = false;
    search.value = '';
  }
  
  onClickOutside(target, focusOut)
  
  let handleOptionClick = (option) => {
    if (selected.value.includes(option)) {
      selected.value = selected.value.filter(o => o !== option)
      return
    }

    if (option) {
      selected.value = [...selected.value, option];
    }
    
    focus();                  
  }

  let onKeyDown = (e) => {
    var control = document.getElementById("nss");
    
    if (e.key === 'N' && e.target !== control.value &&
      window.document.activeElement !== control.value &&
      e.target instanceof HTMLInputElement === false)
    {
      e.preventDefault()

      isOpen.value = true;
      control?.focus()
      control?.select()
    }
  }

  let handleKeypress = (e) => {
    if(e.key === 'Escape'){
      if (search.value.length > 0 || cursor.value > -1){
        search.value = '';
        cursor.value = -1;
      }
      else if (search.value.length === 0 || cursor.value < 0){
        document.activeElement.blur()
        focusOut();
      }
    }

    if(e.key === ' '){
      e.preventDefault();
      if (cursor.value > -1 && cursor.value < items.value.length){
        handleOptionClick(items.value[cursor.value]);
      }
    }

    if(e.key === 'Enter'){
      if (cursor.value > -1 && cursor.value < items.value.length){
        handleOptionClick(items.value[cursor.value]);
      }
    }

    if (e.key === 'ArrowDown'){
      if (cursor.value < items.value.length - 1){
        cursor.value += 1;
        let option = document.getElementById('ns-' + cursor.value)
        if (cursor.value > 0 && option){
          option.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
        }
      }
    }

    if (e.key === 'ArrowUp'){
      if (cursor.value > -1){
        cursor.value -= 1;
        let option = document.getElementById('ns-' + cursor.value)
        if (cursor.value > 0 && option){
          option.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
        }
      }
    }

    if (cursor.value > items.value.length - 1){
      cursor.value = 0;
    }
  }
 
  onMounted(async () => {
    nsBus.on(setExclusive);
    window.document.addEventListener('keydown', onKeyDown);
  })

  onBeforeUnmount(() =>{
    window.document.removeEventListener('keydown', onKeyDown);
  });
 
  return { noOptions, isOpen, selected, search, placeholder, target, items, cursor, hasFocus, foucsIn, focusOut, 
    setExclusive, handleClear, handleOptionClick, handleKeypress, onKeyDown}
}

components["multiselect"] = {template: "#multiselect", props: ['values'], emits: ['update:modelValue'], setup};
</script>
