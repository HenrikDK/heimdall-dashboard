<template id="scale-pods">
  <div @@click="openModal" class="flex px-2 ms-4 rounded-lg items-center justify-center border cursor-pointer
      border-gray-300 bg-white fill-gray-300
      hover:border-sky-500 hover:bg-sky-100 hover:fill-sky-500
      dark:border-white/[.4] dark:text-white/[.6] 
      dark:hover:border-blue-400 dark:hover:text-blue-400 dark:hover:fill-blue-400
      dark:bg-zinc-900">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 my-0.5 me-2">
      <path stroke-linecap="round" stroke-linejoin="round" d="M10.5 6h9.75M10.5 6a1.5 1.5 0 1 1-3 0m3 0a1.5 1.5 0 1 0-3 0M3.75 6H7.5m3 12h9.75m-9.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-3.75 0H7.5m9-6h3.75m-3.75 0a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m-9.75 0h9.75" />
    </svg>
    Scale
  </div>
  <div v-if="isOpen" class="fixed z-[9998] top-0 left-0 w-full h-full bg-white/[0.4] dark:bg-black/[0.4] backdrop-blur-[2px]">
    <div class="shadow-lg rounded-lg mt-[150px] mx-auto w-1/3 p-8
         bg-white 
         dark:bg-zinc-800 dark:border-white/[.4] dark:text-white/[.6]" 
         ref="target">
  
      <div class="flex flex-col text-xl justify-center pb-8">
        <div class="pb-2 text-center">Scale {{item.kind}}</div>
        <div class="font-bold text-center truncate">{{item.metadata.name}}</div>
      </div>
      <div class="flex font-bold">
        <div class="w-1/3">Current replicas:</div>
        <div class="w-2/3 px-1">{{item.status?.readyReplicas ?? item.status?.desiredReplicas}}</div>
      </div>
      <div class="flex">
        <div class="w-1/3">Desired replicas:</div>
        <div class="w-2/3"><input v-model="desired" min="0" max="10" class="w-12 px-1 rounded border" type="number"/></div>
      </div>
      <div class="flex font-bold text-red-400 h-6">
        <div v-if="desired > 10 || desired < 0">Valid interval is between 0 and 10</div>
      </div>
      <div class="flex pt-8">
        <div class="w-2/3"></div>
        <div class="w-1/3 flex">
          <button @@click="closeModal"
               class="flex px-2 py-2 rounded-lg items-center me-4 justify-center border cursor-pointer
                bg-white border-gray-300 fill-gray-300
                hover:border-gray-500 hover:bg-gray-100 hover:fill-gray-500
                dark:border-white/[.4] dark:text-white/[.6] 
                dark:hover:border-white dark:hover:text-white dark:hover:fill-white
                dark:bg-zinc-900">
            Close
          </button>
          <button @@click="submitHandler" :disabled="desired < 0 || desired > 10 || desired === item.status?.readyReplicas"
                  class="flex px-2 py-2 rounded-lg items-center me-4 justify-center border enabled:cursor-pointer
                border-gray-300 bg-white fill-gray-300 
                disabled:border-gray-200 disabled:text-gray-300
                hover:border-sky-500 hover:bg-sky-100 hover:fill-sky-500
                disabled:hover:border-gray-200 disabled:hover:bg-white disabled:hover:fill-gray-300
                dark:border-white/[.4] dark:text-white/[.6] 
                dark:hover:border-blue-400 dark:hover:text-blue-400 dark:hover:fill-blue-400
                disabled:dark:border-white/[.2] disabled:dark:text-white/[.2]
                disabled:dark:hover:border-white/[.2] disabled:dark:hover:bg-zinc-900 disabled:dark:hover:text-white/[.2]
                dark:bg-zinc-900">
            Scale
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script type="module">
import { ref } from 'vue'
import { onClickOutside, onKeyStroke } from '@@vueuse/core'

let setup = (props, ctx) => {
  let isOpen = ref(false);
  let desired = ref(0);
  const target = ref(null);
  
  let updateValue = (v) => {
    desired.value = v;
  }
  
  let closeModal = () => {
    isOpen.value = false;
  }
  
  let openModal = () => {
    desired.value = props.item.status?.replicas ?? 1;
    isOpen.value = true;
  }
  
  let submitHandler = async () => {
    isOpen.value = false;
    if (props.item.kind === 'Deployment'){
      fetch(`/api/namespaces/${props.item.metadata.namespace}/deployments/${props.item.metadata.name}/scale/${desired.value}`, { method: 'PUT' })
        .catch(e => { console.log(e); });
    }
    
    if (props.item.kind === 'StatefulSet'){
      fetch(`/api/namespaces/${props.item.metadata.namespace}/statefulsets/${props.item.metadata.name}/scale/${desired.value}`, { method: 'PUT' })
        .catch(e => { console.log(e); });
    }
  }

  onKeyStroke('Escape', closeModal);
  onClickOutside(target, closeModal);

  return {isOpen, desired, target, updateValue, closeModal, openModal, submitHandler}
}
components["scale-pods"] = { template: "#scale-pods", props:['item'], setup };
</script>
