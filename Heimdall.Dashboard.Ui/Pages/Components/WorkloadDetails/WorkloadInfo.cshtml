<template id="workload-info">
  <div class="text-gray-500 dark:text-gray-300 text-md font-light sans mb-6">
    <div class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Created</div>
      <div>{{ toLocal(item?.metadata?.creationTimestamp) }} ({{ toHuman(item?.metadata?.creationTimestamp) }})</div>
    </div>
    <div class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Name</div>
      <div class="py-1">{{ item?.metadata?.name }}</div>
    </div>
    <div class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Namespace</div>
      <div class="py-1">{{ item?.metadata?.namespace }}</div>
    </div>
    <div class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Type</div>
      <div class="py-1">{{ item?.kind }}</div>
    </div>
    <div v-if="item?.metadata?.labels" class="flex mb-1">
      <div class="px-2 py-0.5 w-1/4 flex justify-between select-none"
        @@click="visibility.labels = !visibility.labels">
        <div>Labels</div>
        <div v-if="!visibility.labels">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
          </svg>
        </div>
        <div v-else>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 15.75 7.5-7.5 7.5 7.5" />
          </svg>
        </div>
      </div>

      <div class="w-3/4 flex flex-col truncate">
        <template v-if="visibility.labels">
          <template v-for="(v, k) in item?.metadata?.labels">
            <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
          </template>
        </template>
        <div v-else class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-1 mb-1 overflow-hidden">
          {{ Object.keys(item?.metadata?.labels).length }} labels ...
        </div>
      </div>
    </div>
    <div v-if="item?.metadata?.annotations" class="flex mb-1">
      <div class="px-2 py-0.5 w-1/4 flex justify-between select-none"
        @@click="visibility.annotations = !visibility.annotations">
        <div>Annotations</div>
        <div v-if="!visibility.annotations">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
          </svg>
        </div>
        <div v-else>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 15.75 7.5-7.5 7.5 7.5" />
          </svg>
        </div>
      </div>
      <div class="flex w-3/4 flex-col truncate">
        <template v-if="visibility.annotations">
          <template v-for="(v, k) in item?.metadata?.annotations">
            <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
          </template>
        </template>
        <div v-else class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-1 mb-1 overflow-hidden">
          {{ Object.keys(item?.metadata?.annotations).length }} annotations ...
        </div>
      </div>
    </div>
    <div v-if="item?.spec?.selector" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Selector</div>
      <div class="flex w-3/4 flex-col truncate">
        <template v-for="(v, k) in item?.spec?.selector?.matchLabels">
          <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
        </template>
      </div>
    </div>
    <div v-if="item?.spec?.template?.spec?.containers" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Images</div>
      <div class="flex w-3/4 flex-col truncate">
        <template v-for="c in item.spec.template.spec.containers">
          <div class="py-1">{{ c.image }}</div>
        </template>
      </div>
    </div>
    <div v-if="item?.status?.replicas || item?.spec?.replicas == 0" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Replicas</div>
      <div class="flex w-3/4">
        <div class="py-1 flex">
          <div v-if="item?.status?.replicas !== undefined">{{ item?.status?.replicas }} desired</div>
          <div v-else>0 desired</div>
          <div v-if="item?.status?.updatedReplicas !== undefined">, {{ item?.status?.updatedReplicas }} updated</div>
          <div v-else>, 0 updated</div>
          <div v-if="item?.status?.readyReplicas !== undefined">, {{ item?.status?.readyReplicas }} total</div>
          <div v-else>, 0 total</div>
          <div v-if="item?.status?.availableReplicas !== undefined">, {{ item?.status?.availableReplicas }} available</div>
          <div v-else>, 0 available</div>
          <div v-if="item?.status?.availableReplicas !== undefined && item?.status?.readyReplicas !== undefined">
            , {{ item?.status?.readyReplicas - item?.status?.availableReplicas }} unavailable
          </div>
          <div v-else>, 0 unavailable</div>
        </div>
        <template v-if="config.canScalePods">
          <scale-pods :item="item"></scale-pods>
        </template>
      </div>
    </div>
    <div v-if="item?.status && item?.status?.numberReady !== undefined" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Scheduled</div>
      <div class="flex w-3/4">
        <div class="py-1 flex">
          <div v-if="item?.status?.currentNumberScheduled !== undefined">{{ item?.status?.desiredNumberScheduled }} desired</div>
          <div v-else>0 desired</div>
          <div v-if="item?.status?.updatedNumberScheduled !== undefined">, {{ item?.status?.updatedNumberScheduled }} updated</div>
          <div v-else>, 0 updated</div>
          <div v-if="item?.status?.numberReady !== undefined">, {{ item?.status?.numberReady }} total</div>
          <div v-else>, 0 total</div>
          <div v-if="item?.status?.numberAvailable !== undefined">, {{ item?.status?.numberAvailable }} available</div>
          <div v-else>, 0 available</div>
          <div v-if="item?.status?.numberAvailable !== undefined && item?.status?.numberReady !== undefined">
            , {{ item?.status?.numberReady - item?.status?.numberAvailable }} unavailable
          </div>
          <div v-else>, 0 unavailable</div>
        </div>
      </div>
    </div>
    <div v-if="item?.spec?.template?.spec?.nodeSelector" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Node Selector</div>
      <div class="flex w-3/4 flex-wrap truncate">
        <template v-for="(v, k) in item?.spec?.template?.spec?.nodeSelector">
          <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
        </template>
      </div>
    </div>
    <div v-if="item?.spec?.strategy?.type" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Strategy Type</div>
      <div class="py-1">{{ item?.spec?.strategy?.type }}</div>
    </div>
    <div v-if="item?.spec?.updateStrategy?.type" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Strategy Type</div>
      <div class="py-1">{{ item?.spec?.updateStrategy?.type }}</div>
    </div>

    <div v-if="item?.status?.conditions" class="flex mb-1">
      <div class="px-2 py-1 w-1/4">Conditions</div>
      <div class="flex w-3/4 flex-wrap truncate">
        <template v-for="s in item?.status?.conditions">
          <div v-if="s.status === 'True'" 
            class="rounded py-1 px-2 mr-2 mb-2 overflow-hidden"
            :class="s.type === 'Available' ? 'border border-green-500 text-green-500' : 'border border-blue-500 text-blue-500'"
            >
            {{s.type}}
          </div>
          <div v-else class="text-gray-400 dark:text-gray-600 bg-gray-100 dark:bg-zinc-900 rounded py-1 px-2 mr-2 mb-2 overflow-hidden">
            {{s.type}}
          </div>
        </template>
      </div>
    </div>
  </div>
</template>

<script type="module">
let setup = (props, ctx) => {
  const visibility = useGlobalPodDetails();
    
  return { visibility, toLocal, toHuman }
}

components["workload-info"] = { template: "#workload-info", props: ['item', 'config'], setup };
</script>
