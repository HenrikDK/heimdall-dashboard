<template id="cluster">
  <div class="pl-2 pr-4 w-100">

    <div v-if="config.metrics" class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Cluster</span>
    </div>

    <br/>
        
    <div v-if="config.metrics" class="flex justify-between mb-8 mt-1">
      <div class="">

        <div class="flex justify-center mb-4">
          <div class="flex">
            <chart-toggle name="cpu" :state="chartState" label="CPU" @@update="e => chartState = e"></chart-toggle>

            <chart-toggle name="memory" :state="chartState" label="Memory" @@update="e => chartState = e"></chart-toggle>
          </div>
        </div>

        <div class="wide-graph">
          <v-chart :option="charts.cluster[chartState]" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
        </div>
      </div>
      <div class="large-graph">
        <v-chart :option="charts.cluster.currentCpu" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="large-graph">
        <v-chart :option="charts.cluster.currentMemory" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
    </div>
        
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
    </div>
        
    <br/>
        
    <div class="flex justify-between mb-4 mt-1">
      <div class="graph">
        <v-chart :option="charts.workloads.pods" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.deployments" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.daemonsets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.statefullsets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.replicasets" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.jobs" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
      <div class="graph">
        <v-chart :option="charts.workloads.cronjobs" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
    </div>
  </div>
</template>

<script type="module">
import { ref, watch, onMounted, onUnmounted } from 'vue'
import { useDark } from "@@vueuse/core";

let setup = (props, ctx) => {
  const isDark = useDark();
  const initOptions = ref({ renderer: "svg" });
  const connections = ref([]);
  const chartState = ref('cpu');
  const streams = ref({metrics: false, k8s: false});
  const namespaces = useGlobalNamespaces();
  const cluster = ref({
    pods: null,
    deployments: null,
    daemonSets: null,
    statefulSets: null,
    replicaSets: null,
    jobs: null,
    cronJobs: null,
  });

  const metrics = ref({
      cpu: [
        { 
          type:'cluster', name:'cpu-usage', 
          metrics: [], data: [], params: { unit: 'cores', name:'Usage', index: 1, colorDark: '#4992ff', colorLight: '#5470c6'}
        }
      ],
      memory: [
        {
          type:'cluster', name:'memory-usage', 
          metrics: [], data: [], params: { unit: 'bytes', name:'Usage', index: 1, colorDark: '#dd79ff', colorLight: '#ea7ccc'}
        }
      ],
      current: [
        { type:'cluster', name:'memory-available', instant: true, metrics: [] },
        { type:'cluster', name:'memory-requests', instant: true, metrics: [] },
        { type:'cluster', name:'memory-limits', instant: true, metrics: [] },
        { type:'cluster', name:'memory-capacity', instant: true, metrics: [] },
        { type:'cluster', name:'memory-allocatable', instant: true, metrics: [] },

        { type:'cluster', name:'cpu-requests', instant: true, metrics: [] },
        { type:'cluster', name:'cpu-limits', instant: true, metrics: [] },
        { type:'cluster', name:'cpu-capacity', instant: true, metrics: [] },
        { type:'cluster', name:'cpu-allocatable', instant: true, metrics: [] }
      ]
  });
  
  const charts = ref({
    cluster:{
        cpu: getSimpleChart(),
        memory: getSimpleChart(),
        currentCpu: current('CPU'),
        currentMemory: current('Memory')
    },
    workloads:{
        pods: workload('Pods', 0, 0),
        deployments: workload('Deployments', 0, 0),
        daemonsets: workload('Daemon Sets', 0, 0),
        statefullsets: workload('Stateful Sets', 0, 0),
        replicasets: workload('Replica Sets', 0, 0),
        jobs: workload('Jobs', 0, 0),
        cronjobs: workload('Cron Jobs', 0, 0),
    }
  });

  let filterNamespace = (values) => {
    let filtered = values;
    if (namespaces.value.length > 0){
      filtered = values?.filter(x => namespaces.value.some(y => x.metadata.namespace === y));
    }
    return filtered;
  };
  
  let updateClusterPods = async () => {
    let filtered = filterNamespace(cluster.value.pods);
    let running = filtered?.filter(x => (x.status?.phase === "Running" && x.status?.containerStatuses.every(y => y.state.running)) 
        || x.status?.phase === "Succeeded").length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.pods = workload('Pods', running, pending);
  };
  
  let updateClusterDeployments = async () => {
    let filtered = filterNamespace(cluster.value.deployments);
    let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.deployments = workload('Deployments', running, pending);
  };
  
  let updateClusterJobs = async () => {
    let filtered = filterNamespace(cluster.value.jobs);
    let running = filtered?.filter(x => x.status?.succeeded).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.jobs = workload('Jobs', running, pending);                
  };
  
  let updateClusterCronJobs = async () => {
    let filtered = filterNamespace(cluster.value.cronJobs);
    let running = filtered?.filter(x => x.status?.lastSuccessfulTime).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.cronjobs = workload('Cron Jobs', running, pending);
  };
  
  let updateClusterStatefulSets = async () => {
    let filtered = filterNamespace(cluster.value.statefulSets);
    let running = filtered?.filter(x => x.status?.replicas === x.status?.readyReplicas).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.statefullsets = workload('Stateful Sets', running, pending);
  };
  
  let updateClusterReplicaSets = async () => {
    let filtered = filterNamespace(cluster.value.replicaSets);
    let running = filtered?.filter(x => x.status?.replicas === 0 || x.status?.replicas === x.status?.readyReplicas).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.replicasets = workload('Replica Sets', running, pending);
  };
  
  let updateClusterDaemonSets = async () => {
    let filtered = filterNamespace(cluster.value.daemonSets);
    let running = filtered?.filter(x => x.status?.currentNumberScheduled === x.status?.numberReady).length ?? 0;
    let pending = (filtered?.length ?? 0) - running;
    charts.value.workloads.daemonsets = workload('Daemon Sets', running, pending);
  };
  
  let updateMetricsCharts = () => {
    updateCpu();
    updateMemory();
    updateCurrent();
  }

  let updateCpu = () => {
    if (!metrics.value.cpu) return;
    if (metrics.value.cpu[0].metrics.length < 1) return;

    let cpuCapacity = getInstantMetricValue(metrics.value.current, 'cpu-capacity');
    if (!cpuCapacity) return;

    var [data, max, unit] = getDataSeries(metrics.value.cpu);

    max = cpuCapacity ?? 0;

    updateSimpleChart(charts.value.cluster.cpu, metrics.value.cpu, unit, isDark.value, 0, max);
  };
  
  let updateMemory = () => {
    if (!metrics.value.memory) return;
    if (metrics.value.memory[0].metrics.length < 1) return;

    let memoryCapacity = getInstantMetricValue(metrics.value.current, 'memory-capacity');
    if (!memoryCapacity) return;

    var [data, max, unit] = getDataSeries(metrics.value.memory);
    
    max = memoryCapacity ?? 0;

    updateSimpleChart(charts.value.cluster.memory, metrics.value.memory, unit, isDark.value, 0, max);
  };

  let updateCurrent = async () => {
    if (!metrics.value.memory || !metrics.value.cpu) return;
    if (metrics.value.memory[0].metrics.length < 1 || metrics.value.cpu[0].metrics.length < 1) return;

    let memoryCapacity = getInstantMetricValue(metrics.value.current, 'memory-capacity');
    if (!memoryCapacity) return;

    let memoryUsage = getMetricLastPoints(metrics.value.memory[0].metrics);
    let memoryAvailable = getInstantMetricValue(metrics.value.current, 'memory-available');
    let memoryAllocatable = getInstantMetricValue(metrics.value.current, 'memory-allocatable');
    let memoryRequests = getInstantMetricValue(metrics.value.current, 'memory-requests');
    let memoryLimits = getInstantMetricValue(metrics.value.current, 'memory-limits');

    let mUnit = getUnitFromBytes(memoryCapacity);

    let memRequestPct = memoryRequests / memoryCapacity * 100;
    let memRequestValue = memoryRequests / mUnit.magnitude;
    let mRequests = {pct: memRequestPct.toFixed(2), units: memRequestValue.toFixed(2) };

    let memLimitPct = memoryLimits / memoryCapacity * 100;
    let memLimitValue = memoryLimits / mUnit.magnitude;
    if (memLimitPct > 100){
        memLimitPct = 100;
    }
    let mLimits = {pct: memLimitPct.toFixed(2), units: memLimitValue.toFixed(2)};

    let memUsageValue = memoryUsage / mUnit.magnitude;
    let memUsagePct = memoryUsage / memoryCapacity * 100;
    let mUsage = {pct: memUsagePct.toFixed(2), units: memUsageValue.toFixed(2) };

    charts.value.cluster.currentMemory = current('Memory', mUnit.suffix, mUsage, mRequests, mLimits);

    let cpuCapacity = getInstantMetricValue(metrics.value.current, 'cpu-capacity');
    let cpuUsage = getMetricLastPoints(metrics.value.cpu[0].metrics);
    let cpuAllocatable = getInstantMetricValue(metrics.value.current, 'cpu-allocatable');
    let cpuRequests = getInstantMetricValue(metrics.value.current, 'cpu-requests');
    let cpuLimits = getInstantMetricValue(metrics.value.current, 'cpu-limits');

    let cpuRequestPct = cpuRequests / cpuCapacity * 100;
    let cRequests = {pct: cpuRequestPct.toFixed(2), units: cpuRequests.toFixed(2) };
    
    let cpuLimitPct = cpuLimits / cpuCapacity * 100;
    if (cpuLimitPct > 100){
        cpuLimitPct = 100;
    }
    let cLimits = {pct: cpuLimitPct.toFixed(2), units: cpuLimits.toFixed(2) };              
    
    let cpuUsagePct = cpuUsage / cpuCapacity * 100;
    let cUsage = {pct: cpuUsagePct.toFixed(2), units: cpuUsage.toFixed(2) };
    
    charts.value.cluster.currentCpu = current('CPU', 'vCores', cUsage, cRequests, cLimits);
  };
  
  let updateMetrics = async () => {
    if (props.nodes.length < 1 || props.config.metrics !== true) return;

    metrics.value.memory.forEach(x => x['nodes'] = props.nodes)
    metrics.value.cpu.forEach(x => x['nodes'] = props.nodes)
    metrics.value.current.forEach(x => x['nodes'] = props.nodes)

    if (streams.value.metrics) return;      
    //console.log("scheduling metrics updates");
    
    streamMetrics(metrics.value.memory, updateMetricsCharts, connections.value, false);
    streamMetrics(metrics.value.cpu, updateMetricsCharts, connections.value, false);
    streamMetrics(metrics.value.current, updateMetricsCharts, connections.value, false);
    streams.value.metrics = true;
  }
    
  watch(namespaces, () => {
    updateClusterPods();
    updateClusterDeployments();
    updateClusterJobs();
    updateClusterCronJobs();
    updateClusterStatefulSets();
    updateClusterReplicaSets();
    updateClusterDaemonSets();
  });
  
  watch([chartState, isDark], () => {
    updateMetricsCharts();
  });

  watch(() => props.nodes, () => {
    updateMetrics();
  });
  
  watch(() => cluster.value.pods, updateClusterPods);
  watch(() => cluster.value.deployments, updateClusterDeployments);
  watch(() => cluster.value.jobs, updateClusterJobs);
  watch(() => cluster.value.cronJobs, updateClusterCronJobs);
  watch(() => cluster.value.statefulSets, updateClusterStatefulSets);
  watch(() => cluster.value.replicaSets, updateClusterReplicaSets);
  watch(() => cluster.value.daemonSets, updateClusterDaemonSets);
  
  onMounted(async () => {
    updateMetrics();
    
    if (streams.value.k8s) return;

    streamResults('/k8s/api/v1/pods', j => cluster.value.pods = j, connections.value);
    streamResults('/k8s/apis/apps/v1/deployments', j => cluster.value.deployments = j, connections.value);
    streamResults('/k8s/apis/apps/v1/daemonsets', j => cluster.value.daemonSets = j, connections.value);
    streamResults('/k8s/apis/apps/v1/statefulsets', j => cluster.value.statefulSets = j, connections.value);
    streamResults('/k8s/apis/apps/v1/replicasets', j => cluster.value.replicaSets = j, connections.value);
    streamResults('/k8s/apis/batch/v1/cronjobs', j => cluster.value.cronJobs = j, connections.value);
    streamResults('/k8s/apis/batch/v1/jobs', j => cluster.value.jobs = j, connections.value);
    streams.value.k8s = true;
  });

  onUnmounted(async () => {
    closeConnections(connections.value);
  });
    
  return {
    isDark, initOptions, cluster, metrics, charts, connections, chartState, namespaces,
    filterNamespace, streams,
    updateClusterPods, updateClusterDeployments, updateClusterJobs, updateClusterCronJobs, 
    updateClusterStatefulSets, updateClusterReplicaSets, updateClusterDaemonSets,
    updateCpu, updateMemory, updateCurrent, updateMetrics, updateMetricsCharts
  }
}

components["cluster"] = {template: "#cluster", props: ['config', 'nodes'], setup};
routes.push({path:'/', name:'cluster',  component: components["cluster"]})
</script>
