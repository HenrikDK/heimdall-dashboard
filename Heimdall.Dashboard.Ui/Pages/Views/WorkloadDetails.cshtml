<template id="workload-details">
  <div class="pl-2 pr-4 max-w-5xl mx-auto">

    <br/>

    <div class="flex mb-8 text-xl items-center text-gray-500 dark:text-gray-300 font-light sans">
      <div class="text-md">{{item.kind}} / {{item?.metadata?.namespace }} / {{ item?.metadata?.name }}</div>
    </div>
    
    <div v-if="config.metrics" class="my-4">
      <div class="flex justify-center mb-4">
        <div class="flex">
          <chart-toggle name="cpu" :state="chartState" label="CPU" @@update="e => chartState = e"></chart-toggle>

          <chart-toggle name="memory" :state="chartState" label="Memory" @@update="e => chartState = e"></chart-toggle>

          <chart-toggle name="network" :state="chartState" label="Network" @@update="e => chartState = e"></chart-toggle>

          <chart-toggle name="filesystem" :state="chartState" label="Filesystem" @@update="e => chartState = e"></chart-toggle>

          <div class="w-[105px] me-2"></div>
        </div>
      </div>
      
      <div class="wide-details-graph">
        <v-chart ref="chart" :option="charts[chartState]" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
      </div>
    </div>

    <br/>

    <div class="text-gray-500 dark:text-gray-300 text-md font-light sans mb-8">
      <div class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Created</div>
        <div>{{ toLocal(item?.metadata?.creationTimestamp) }} ({{ toHuman(item?.metadata?.creationTimestamp) }})</div>
      </div>
      <div class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Name</div>
        <div class="py-1">{{ item?.metadata?.name }}</div>
      </div>
      <div class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Namespace</div>
        <div class="py-1">{{ item?.metadata?.namespace }}</div>
      </div>
      <div class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Type</div>
        <div class="py-1">{{ item?.kind }}</div>
      </div>
      <div v-if="item?.metadata?.labels" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Labels</div>
        <div class="flex w-3/4 flex-col truncate">
          <template v-for="(v, k) in item?.metadata?.labels">
            <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
          </template>
        </div>
      </div>
      <div v-if="item?.metadata?.annotations" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Annotations</div>
        <div class="flex w-3/4 flex-col truncate">
          <template v-for="(v, k) in item?.metadata?.annotations">
            <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
          </template>
        </div>
      </div>
      <div v-if="item?.spec?.selector" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Selector</div>
        <div class="flex w-3/4 flex-col truncate">
          <template v-for="(v, k) in item?.spec?.selector?.matchLabels">
            <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
          </template>
        </div>
      </div>
      <div v-if="item?.spec?.template?.spec?.containers" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Images</div>
        <div class="flex w-3/4 flex-col truncate">
          <template v-for="c in item.spec.template.spec.containers">
            <div class="py-1">{{ c.image }}</div>
          </template>
        </div>
      </div>
      <div v-if="item?.status?.replicas" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Replicas</div>
        <div class="flex w-3/4">
          <div class="py-1 flex">
            <div v-if="item?.status?.replicas !== undefined">{{ item?.status?.replicas }} desired</div>
            <div v-if="item?.status?.updatedReplicas !== undefined">, {{ item?.status?.updatedReplicas }} updated</div>
            <div v-if="item?.status?.readyReplicas !== undefined">, {{ item?.status?.readyReplicas }} total</div>
            <div v-if="item?.status?.availableReplicas !== undefined">, {{ item?.status?.availableReplicas }} available</div>
            <div v-if="item?.status?.availableReplicas !== undefined && item?.status?.readyReplicas !== undefined">
              , {{ item?.status?.readyReplicas - item?.status?.availableReplicas }} unavailable
            </div>
          </div>
          <template v-if="config.canScalePods">
            <scale-pods :item="item"></scale-pods>
          </template>
        </div>
      </div>
      <div v-if="item?.status && item?.status?.replicas === undefined" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Scheduled</div>
        <div class="flex w-3/4">
          <div class="py-1 flex">
            <div v-if="item?.status?.currentNumberScheduled !== undefined">{{ item?.status?.desiredNumberScheduled }} desired</div>
            <div v-if="item?.status?.updatedNumberScheduled !== undefined">, {{ item?.status?.updatedNumberScheduled }} updated</div>
            <div v-if="item?.status?.numberReady !== undefined">, {{ item?.status?.numberReady }} total</div>
            <div v-if="item?.status?.numberAvailable !== undefined">, {{ item?.status?.numberAvailable }} available</div>
            <div v-if="item?.status?.numberAvailable !== undefined && item?.status?.numberReady !== undefined">
              , {{ item?.status?.numberReady - item?.status?.numberAvailable }} unavailable
            </div>
          </div>
        </div>
      </div>
      <div v-if="item?.spec?.template?.spec?.nodeSelector" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Node Selector</div>
        <div class="flex w-3/4 flex-wrap truncate">
          <template v-for="(v, k) in item?.spec?.template?.spec?.nodeSelector">
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2 overflow-hidden">{{ k }}: {{v}}</div>
          </template>
        </div>
      </div>
      <div v-if="item?.spec?.strategy?.type" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Strategy Type</div>
        <div class="py-1">{{ item?.spec?.strategy?.type }}</div>
      </div>
      <div v-if="item?.spec?.updateStrategy?.type" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Strategy Type</div>
        <div class="py-1">{{ item?.spec?.updateStrategy?.type }}</div>
      </div>

      <div v-if="item?.status?.conditions" class="flex mb-2">
        <div class="px-2 py-1 w-1/4">Conditions</div>
        <div class="flex w-3/4 flex-wrap truncate">
          <template v-for="s in item?.status?.conditions">
            <div v-if="s.status === 'True'" 
              class="rounded py-1 px-2 mr-2 mb-2 overflow-hidden"
              :class="s.type === 'Available' ? 'border border-green-500 text-green-500' : 'border border-blue-500 text-blue-500'"
              >
              {{s.type}}
            </div>
            <div v-else class="text-gray-400 dark:text-gray-600 bg-gray-100 dark:bg-zinc-900 rounded py-1 px-2 mr-2 mb-2 overflow-hidden">
              {{s.type}}
            </div>
          </template>
        </div>
      </div>
    </div>

    <div v-if="pods.length > 0" class="flex mt-8 mb-4 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Pods</span>
    </div>

    <simple-table :columns="columns" :initial-sort="sorting" :data="pods"></simple-table>

    <br/>

    <div v-if="events.length > 0" class="flex mt-8 mb-4 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Events</span>
    </div>

    <div v-if="events.length > 0" class="text-gray-500 dark:text-gray-300 text-md font-light sans rounded-lg shadow-lg border border-gray-200 dark:border-zinc-800">
      <template v-for="event in events">
        <div class="my-3">
          <div :class="event.type === 'Warning' ? 'text-red-500' : ''"
              class="mb-2 px-4 py-1 w-full break-words">
            {{ event.message }}
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Source</div>
            <div class="py-1 w-3/4 truncate">{{event.source.host}} {{event.source.component}}</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Count</div>
            <div class="py-1 w-3/4 truncate">{{ event.count }}</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Sub object</div>
            <div class="py-1 w-3/4 truncate">{{ event?.involvedObject?.name }}</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Last seen</div>
            <div class="py-1 w-3/4 truncate">{{ toLocal(event.lastTimestamp) }} ({{ toHuman(event.lastTimestamp) }})</div>
          </div>
        </div>
      </template>
    </div>

    <br/><br/>
    
  </div>
</template>

<script type="module">
import { useDark } from "@@vueuse/core";
import { ref, onMounted, onUnmounted, watch } from 'vue'
import { useRoute } from 'vue-router';

let setup = (props, ctx) => {
  const isDark = useDark();
  const item = ref({});
  const connections = ref([]);
  const route = useRoute();
  const isLoaded = ref(false);

  const pods = ref([]);
  const clusterPods = ref([]);

  const events = ref([]);
  const clusterEvents = ref([]);  

  const chart = ref();
  const chartState = ref('cpu');
  const initOptions = ref({ renderer: "svg" });

  const metrics = ref({
    cpu: [
      { 
        type:'pod', name:'cpu-usage', pods: '', namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'cores', name:'Usage', index: 1, colorDark: '#4992ff', colorLight: '#5470c6'}
      }
    ],
    memory: [
      {
        type:'pod', name:'mem-usage', pods: '', namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Usage', index: 1, colorDark: '#dd79ff', colorLight: '#ea7ccc'}
      },
    ],
    network: [
      {
        type:'pod', name:'net-recv', pods: '', namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Receive', colorDark: '#58d9f9', colorLight: '#73c0de'}
      }, 
      {
        type:'pod', name:'net-sent', pods: '', namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Transmit', colorDark: '#7cffb2', colorLight: '#91cc75'}
      }
    ],
    filesystem: [
      {
        type:'pod', name:'fs-reads', pods: '', namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Reads', colorDark: '#fddd60', colorLight: '#fac858'}
      }, 
      {
        type:'pod', name:'fs-writes', pods: '', namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Writes', colorDark: '#ff8a45', colorLight: '#fc8452'}
      }
    ]
  });

  let getCpuUsage = (row) => {
    if (metrics.value['cpu'][0].metrics.length < 1) return '-';
    let pod = row.metadata.name;

    let series = metrics.value['cpu'][0].metrics.filter(x => x.metric.pod == pod)[0]
    if (series === undefined) return '-';

    let usage = parseFloat(series.values.slice(-1)[0][1]);
    
    return usage.toFixed(3);
  }

  let getMemoryUsage = (row) => {
    if (metrics.value['memory'][0].metrics.length < 1) return '-';
    let pod = row.metadata.name;

    let series = metrics.value['memory'][0].metrics.filter(x => x.metric.pod == pod)[0]

    let usage = parseFloat(series.values.slice(-1)[0][1]);

    let unit = getUnitFromBytes(usage);

    return `${(usage / unit.magnitude).toFixed(1)} ${unit.suffix}`
  }

  const charts = ref({
    cpu: getSimpleChart(),
    memory: getSimpleChart(),
    network: getSimpleChart(),
    filesystem: getSimpleChart()
  });

  const sorting = ref([ {id:'name', sort:'asc'} ]);
  const columns = ref([
    { header: 'Name', id: 'name', classes: 'truncate grow shrink w-52', 
      accessor: row => row.metadata.name },
    { header: 'Node', id: 'node', classes: 'w-72', 
      accessor: row => row.spec.nodeName },
    { header: 'Containers', id: 'containers', classes: 'truncate w-32', canSort: false, 
      accessor: row => row.status.containerStatuses, formatter:'pod-lights' },
    { header: 'Cpu', id: 'cpu', classes: 'truncate w-24', 
      accessor: getCpuUsage },
    { header: 'Memory', id: 'memory', classes: 'truncate w-24', 
      accessor: getMemoryUsage },
    { header: 'Status', id: 'status', classes: 'w-[6rem]', canSort: false, 
      accessor: row => row.status.phase, formatter:'pod-status' }
  ]);

  let toLocal = (value) => {
    if (!value) return '';
      
    var DT = window.DateTime || luxon.DateTime;
    let result = DT.fromISO(String(value)).setLocale('da-dk').toFormat('y-LL-dd HH:mm:ss');
    return result;
  };
  
  let toHuman = (value) => {
    if (!value) return '';
    
    var DT = window.DateTime || luxon.DateTime;
    const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
    var date = DT.now();

    var newDatetime = DT.fromISO(String(value));
    return toHumanValues(newDatetime.diff(date,  unit)).join(' ') + ' Ago';
  }

  let updateMetrics = async () => {
    if (props.config.metrics && pods.value.length > 0 && !isLoaded.value){
      isLoaded.value = true;
      streamMetrics(metrics.value.cpu, updateCpu, connections.value, true);
      streamMetrics(metrics.value.memory, updateMemory, connections.value, true);
      streamMetrics(metrics.value.network, updateNetworking, connections.value, true);
      streamMetrics(metrics.value.filesystem, updateFilesystem, connections.value, true);
    }
  }

  let updateCpu = () => {
    if (!metrics.value.cpu) return;
    if (metrics.value.cpu[0].metrics.length < 1) return;

    var [data, max, unit] = getSumSeries(metrics.value.cpu);

    updateSimpleChart(charts.value.cpu, metrics.value.cpu, unit, isDark.value);
  };
  
  let updateMemory = () => {
    if (!metrics.value.memory) return;
    if (metrics.value.memory[0].metrics.length < 1) return;

    var [data, max, unit] = getSumSeries(metrics.value.memory);
    
    updateSimpleChart(charts.value.memory, metrics.value.memory, unit, isDark.value);
  };

  let updateNetworking = () => {
    if (!metrics.value.network) return;
    if (metrics.value.network[0].metrics.length < 1) return;

    var [data, max, unit] = getSumSeries(metrics.value.network);

    updateSimpleChart(charts.value.network, metrics.value.network, unit, isDark.value);
  }

  let updateFilesystem = () => {
    if (!metrics.value.filesystem) return;
    if (metrics.value.filesystem[0].metrics.length < 1) return;

    var [data, max, unit] = getSumSeries(metrics.value.filesystem);

    updateSimpleChart(charts.value.filesystem, metrics.value.filesystem, unit, isDark.value);
  }

  watch([chartState, pods, isDark], () => {
    updateCpu();
    updateMemory();
    updateNetworking();
    updateFilesystem();
  })

  let matchLabels = (labels, selector) => {
    let result = Object.keys(selector).every(x => labels[x] === selector[x])
    return result;
  }

  watch([clusterPods, item], () => {
    if (item.value?.spec?.selector?.matchLabels === undefined) return;

    let current = clusterPods.value.filter(x => matchLabels(x?.metadata?.labels, item.value?.spec?.selector?.matchLabels));
    let podsList = current.map(x => x.metadata.name).join('|');

    metrics.value['cpu'].forEach(x => x['pods'] = podsList);
    metrics.value['memory'].forEach(x => x['pods'] = podsList);
    metrics.value['network'].forEach(x => x['pods'] = podsList);
    metrics.value['filesystem'].forEach(x => x['pods'] = podsList);

    pods.value = current;

    updateMetrics();
  });

  watch(clusterEvents, () => {
    let name = route.params.name;
    events.value = clusterEvents.value.filter(x => x?.involvedObject?.name === name);
  });
  
  onMounted(async () => {
    let name = route.params.name;
    let type = route.params.type;
    let namespace = route.params.namespace;
    
    let url = `/k8s/apis/apps/v1/namespaces/${namespace}/${type}s`;
    if (['cronjobs', 'jobs'].includes(type + 's')){
        url = `/k8s/apis/batch/v1/namespaces/${namespace}/${type}s`    
    }
    
    streamResult(url, name, j => item.value = j, connections.value);
    streamResults(`/k8s/api/v1/namespaces/${namespace}/pods`, j => clusterPods.value = j, connections.value);
    streamResults(`/k8s/api/v1/namespaces/${namespace}/events`, j => clusterEvents.value = j, connections.value)
  });
  
  onUnmounted(async () => {
    closeConnections(connections.value);
  });

  return { 
    pods, clusterPods, events, clusterEvents, sorting, columns, isLoaded, getCpuUsage, 
    item, connections, toLocal, toHuman,
    metrics, charts, chartState, initOptions, isDark,
    updateCpu, updateMemory, updateNetworking, updateFilesystem, updateMetrics
  }
}

components["workload-details"] = { template: "#workload-details", props: ['config', 'filters'], setup };    
routes.push({path:'/namespaces/:namespace/workloads/:name/:type', name:'workload-details', component: components["workload-details"]})    
</script>
