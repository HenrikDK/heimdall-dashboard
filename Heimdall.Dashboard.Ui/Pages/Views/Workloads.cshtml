<template id="workloads">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Workloads</span>
    </div>
        
    <virtual-table :columns="columns" :initial-sort="sorting" :data="workloads" :loading="loading"></virtual-table>
        
  </div>
</template>

<script type="module">
import { ref, watch, onMounted, onUnmounted } from 'vue'

let setup = (props, ctx) => {  
  const loading = ref(true);
  const connections = ref([]);
  const clusterWorkloads = ref([]);
  const clusterCronJobs = ref([]);
  const clusterDaemonSets = ref([]);
  const clusterJobs = ref([]);
  const clusterStatefulSets = ref([]);
  
  const workloads = ref([]);
    
  const sorting = ref([{ id:"name", sort: "asc" }, { id:"namespace", sort: "desc" }]);
  const columns = ref([
    { header:"Name", id:"name", classes:"grow shrink truncate 2xl:w-64 xl:w-52 lg:w-40", 
      accessor: row => row.metadata.name },
    { header:"Namespace", id:"namespace", classes:"truncate 2xl:w-52 xl:w-44 lg:w-32", 
      accessor: row => row.metadata.namespace, formatter:'namespace' },
    { header:"Type", id:"kind", canSort:false, classes:"truncate 2xl:w-48 xl:w-40 lg:w-32", 
      accessor: row => row.kind },
    { header:"Pods", id:"pods", canSort:false, canFilter:false, classes:"2xl:w-52 xl:w-44 lg:w-32", 
      accessor: row => row.status, formatter:'deployment-lights' },
    { header:"Age", id:"age", sorter:"text", classes:"w-40",
      accessor: row => row.metadata.creationTimestamp, formatter:'object-age' },
    { header:"Conditions", id:"status", canSort:false, classes:"truncate 2xl:w-60 xl:w-52 lg:w-44", 
      accessor: row => row.status, formatter:'deployment-conditions' },
  ]);
  
  let updateWorkloads = () => {
    if (!clusterWorkloads.value) return;
    if (!clusterDaemonSets.value) return;
    if (!clusterCronJobs.value) return;
    if (!clusterJobs.value) return;
    if (!clusterStatefulSets.value) return;
    
    let items = [clusterWorkloads.value, clusterDaemonSets.value.filter(x => x.status.desiredNumberScheduled > 0), clusterCronJobs.value, clusterJobs.value, clusterStatefulSets.value];
    
    let result = items.flat().filter(x => !!x);
    
    if (props.filters?.length > 0){
        result = result.filter(x => props.filters.includes(x.metadata.namespace))
    }
    
    workloads.value = result;
    loading.value = false;
  }
  
  watch([() => props.filters, clusterWorkloads, clusterCronJobs, clusterDaemonSets, clusterJobs, clusterStatefulSets], updateWorkloads);
  
  onMounted(async () => {
    streamResults('/k8s/apis/apps/v1/deployments', j => clusterWorkloads.value = j, connections.value)
    streamResults('/k8s/apis/apps/v1/daemonsets', j => clusterDaemonSets.value = j, connections.value)
    streamResults('/k8s/apis/apps/v1/statefulsets', j => clusterStatefulSets.value = j, connections.value)
    streamResults('/k8s/apis/batch/v1/cronjobs', j => clusterCronJobs.value = j, connections.value)
    streamResults('/k8s/apis/batch/v1/jobs', j => clusterJobs.value = j, connections.value)
  });

  onUnmounted(async () => {
    closeConnections(connections.value);
  });

  return { 
    loading, sorting, workloads, columns, connections,
    clusterWorkloads, clusterCronJobs, clusterDaemonSets, clusterJobs, clusterStatefulSets,
    updateWorkloads
  }
}

components["workloads"] = { template: "#workloads", props: ['filters'], setup };
routes.push({path:'/workloads', name:'workloads', component: components["workloads"]})
</script>
