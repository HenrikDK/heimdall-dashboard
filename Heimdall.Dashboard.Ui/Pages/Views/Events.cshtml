<template id="events">
  <div class="pl-2 pr-4 w-100">

  <div class="flex my-2 items-center">
    <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Events</span>
  </div>

  <virtual-table :columns="columns" :initial-sort="sorting" :data="events" :loading="loading"></virtual-table>
        
  </div>
</template>

<script type="module">
import { ref, watch, onMounted, onUnmounted } from 'vue'

let setup = (props, ctx) => {
  const loading = ref(true);
  const connections = ref([]);
  const clusterEvents = ref([]);
  const events = ref([]);
  
  let updateEvents = async () => {
    if (!clusterEvents.value) return;
    
    const currentTime = new Date();
    const before12Hours = new Date(currentTime.setHours(currentTime.getHours() - 12));

    let recent = clusterEvents.value.filter(x=>(new Date(x.lastTimestamp)) >= before12Hours)

    if (props.filters?.length > 0){
        recent = recent.filter(x => props.filters.includes(x.metadata.namespace))
    }

    if (recent.length === 0){
      recent = clusterEvents.value.slice(0, 100);
    }
    
    events.value = recent;
    loading.value = false;
  };
  
  watch(clusterEvents, updateEvents);
  
  const sorting = ref([{ id:'age', sort: 'desc' }]);
  const columns = ref([
      { header:'Type', id:'type', sorter:'text', classes:'w-32',
        accessor: row => row.type },
      { header:'Namespace', id:'namespace', sorter:'text', formatter:'namespace', classes:'truncate 2xl:w-52 xl:w-44 lg:w-32',
        accessor: row => row.involvedObject.namespace},
      { header:'Message', id:'message', canSort:false, classes:'2xl:w-[41rem] xl:w-[23rem] lg:w-[19rem] grow shrink',
        accessor: row => row.message, formatter:'event-message' },
      { header:'Source', id:'source', canSort:false, classes: 'truncate 2xl:w-80 xl:w-64 lg:w-64', 
        accessor: row => row.involvedObject.name, formatter:'event-source' },
      { header:'Events', id:'events', sorter:'number', classes:'w-40', 
        accessor: row => row.count },
      { header:'Age', id:'age', sorter:'text', classes:'w-32',
        accessor: row => row.lastTimestamp, formatter:'object-age' },
  ]);
  
  onMounted(async () => {
    streamResults('/k8s/api/v1/events', j => clusterEvents.value = j, connections.value);
  });
  
  onUnmounted(async () => {
    closeConnections(connections.value);
  });

  return { loading, clusterEvents, events, sorting, columns, updateEvents, connections }
}

components["events"] = {template: "#events", props: ['filters'], setup};
routes.push({path:'/events', name:'events',  component: components["events"]})
</script>
