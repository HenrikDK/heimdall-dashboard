<template id="pods">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Pods</span>
    </div>
    
    <virtual-table :columns="columns" :initial-sort="sorting" :data="pods" :loading="loading"></virtual-table>
    
  </div>
</template>

<script type="module">
import { ref, watch, onMounted, onUnmounted } from 'vue'

let setup = (props, ctx) => {
  const loading = ref(true);          
  const connections = ref([]);
  const sorting = ref([ {id:'name', sort:'asc'}, { id:"namespace", sort: "desc" } ]);
  const clusterPods = ref([]);
  const pods = ref([]);
    
  let getRestarts = (row) => {
    let con = 0;
    con += row.status.containerStatuses?.reduce((a, v) => a + v.restartCount, 0);
    con += row.status.initContainerStatuses?.reduce((a, v) => a + v.restartCount, 0) ?? 0;
    return con
  }
  
  const columns = ref([
    { header: 'Name', id: 'name', classes: 'truncate grow shrink 2xl:w-[42rem] xl:w-[22rem] lg:w-[16rem]', 
      accessor: row => row.metadata.name },
    { header: 'Namespace', id: 'namespace', classes: 'truncate 2xl:w-52 xl:w-44 lg:w-32', 
      accessor: row => row.metadata.namespace, formatter: 'namespace' },
    { header: 'Containers', id: 'containers', canSort: false, canFilter: false, classes: '2xl:w-52 xl:w-44 lg:w-32', 
      accessor: row => row.status.containerStatuses, formatter:'pod-lights' },
    { header: 'Restarts', id: 'restarts', classes: 'w-40', sorter: 'number',
      accessor: getRestarts },
    { header: 'Age', id: 'age', classes: 'w-40', 
      accessor: row => row.metadata.creationTimestamp, formatter:'object-age' },
    { header: 'Status', id: 'status', canSort: false, classes: 'truncate 2xl:w-64 xl:w-52 lg:w-40',  
      accessor: row => row.status.phase, formatter:'pod-status' }
  ]);
  
  let updatePods = () => {
    if (!clusterPods.value) return;
    
    let result = [...clusterPods.value];
                    
    if (props.filters?.length > 0){
        result = result.filter(x => props.filters.includes(x.metadata.namespace))
    }
    
    pods.value = result;
    loading.value = false;
  }
  
  watch([() => props.filters, clusterPods ], updatePods);
  
  onMounted(async () => {
    streamResults('/k8s/api/v1/pods', j => clusterPods.value = j, connections.value);
  });

  onUnmounted(async () => {
    closeConnections(connections.value);
  });
  
  return {
    loading, sorting, clusterPods, pods, columns, getRestarts, updatePods, connections
  }
}

components["pods"] = { template: "#pods", props: ['filters'], setup};
routes.push({path:'/pods', name:'pods', component: components["pods"]});
</script>
