<template id="services">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Services</span>
    </div>
  
  <virtual-table :columns="columns" :initial-sort="sorting" :data="services" :loading="loading"></virtual-table>
  
  </div>
</template>

<script type="module">
import { ref, watch, onMounted, onUnmounted } from 'vue'

let setup = (props, ctx) => {
  const loading = ref(true);
  const connections = ref([]);
  const sorting = ref([{id:'name', sort:'asc'}]);
  const clusterServices = ref([]);
  const services = ref([]);
    
  let getKubeDns = (row) => {
    let lines = [];
    if (row.spec?.ports){
      lines = row.spec?.ports?.map(x => row.metadata.name + '.' + row.metadata.namespace + ':' + x.port);
    }
    return lines.join("\r\n");
  }
    
  const columns = ref([
    { header:'Type', id: 'type', canSort: false, classes: 'truncate 2xl:w-48 xl:w-40 lg:w-32', 
      accessor: row => row.spec.type },
    { header:'Name', id: 'name', sorter: 'text', classes: 'truncate 2xl:w-64 xl:w-52 lg:w-40', 
      accessor: row => row.metadata.name },
    { header:'Namespace', id: 'namespace', sorter: 'text', classes: 'truncate 2xl:w-52 xl:w-44 lg:w-40', 
      accessor: row => row.metadata.namespace, formatter:'namespace' },
    { header:'Kube-DNS', id:'dns', sorter: 'text', classes: 'truncate grow shrink',
      accessor: getKubeDns, formatter:'kube-dns' },
    { header:'Age', id:'age', sorter: 'text', classes:'w-40', 
      accessor: row => row.age, formatter:'object-age' }
  ]);

  let updateServices = async () => {
    if (!clusterServices.value) return;
      
    let result = [...clusterServices.value];
    
    if (props.filters?.length > 0){
        result = result.filter(x => props.filters.includes(x.metadata.namespace))
    }
      
    services.value = result;
    loading.value = false;
  }
  
  watch([() => props.filters, clusterServices], updateServices);
  
  onMounted(() => {
    streamResults('/k8s/api/v1/services', j => clusterServices.value = j, connections.value)
  });

  onUnmounted(async () => {
    closeConnections(connections.value);
  });
  
  return { loading, sorting, columns, clusterServices, services, getKubeDns, updateServices }
}

components["services"] = { template: "#services", props: ['filters'], setup };
routes.push({path:'/services', name:'services', component: components["services"]})    
</script>
