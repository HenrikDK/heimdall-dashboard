<template id="ingresses">
  <div class="pl-2 pr-4 w-100">
    <div class="flex my-2 items-center">
      <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Ingresses</span>
    </div>

    <virtual-table :columns="columns" :initial-sort="sorting" :data="ingresses" :loading="loading"></virtual-table>
  
  </div>
</template>

<script type="module">
import { ref, watch, onMounted, onUnmounted } from 'vue'

let setup = (props, ctx) => {
  const loading = ref(true);
  const connections = ref([]);
  const clusterIngresses = ref([]);
  const ingresses = ref([]);
  
  let getLoadBalancers = (row) => {
    if (!row.status?.loadBalancer?.ingress) return '';
    
    let ips = row.status.loadBalancer?.ingress.map(x => x.ip);
    
    return ips.join('|')
  }
  
  let updateIngresses = () => {
     if (!clusterIngresses.value) return;
      
     let result = [...clusterIngresses.value];
                      
    if (props.filters?.length > 0){
        result = result.filter(x => props.filters.includes(x.metadata.namespace))
    }
      
     ingresses.value = result;
     loading.value = false;
  }

  const sorting = ref([{ id:'name', sort: 'desc' }]);
  const columns = ref([
    { header: 'Name', id: 'name', sorter:'text', classes:'truncate 2xl:w-64 xl:w-44 lg:w-32',
      accessor: row => row.metadata.name },
    { header: 'Namespace', id: 'namespace', sorter:'text', classes:'2xl:w-52 xl:w-44 lg:w-32',
      accessor: row => row.metadata.namespace, formatter:'namespace' },
    { header: 'Type', id: 'type', sorter:'text', classes:'2xl:w-40 xl:w-30 lg:w-24',
      accessor: row => row.spec.ingressClassName },
    { header: 'LoadBalancers', id: 'loadbalancers', sorter:'text', classes:'truncate w-44', 
      accessor: getLoadBalancers, formatter:'ingress-load-balancers' },
    { header: 'Host', id: 'host', classes:'truncate grow shrink 2xl:w-64 xl:w-44 lg:w-32',
      accessor: row => row.spec.rules, formatter:'ingress-hosts' },
    { header: 'Age', id: 'age', sorter:'text', classes:'w-40',
      accessor: row => row.metadata.creationTimestamp, formatter:'object-age' }
  ]);
  
  watch([props.filters, clusterIngresses], updateIngresses);
  
  onMounted(() => {
    streamResults('/k8s/apis/networking.k8s.io/v1/ingresses', j => clusterIngresses.value = j, connections.value)
  });

  onUnmounted(async () => {
    closeConnections(connections.value);
  });
  
  return { loading, clusterIngresses, ingresses, sorting, columns, getLoadBalancers, connections }
}

components["ingresses"] = { template: "#ingresses", props: ['filters'], setup };
routes.push({path:'/ingresses', name:'ingresses', component: components["ingresses"]})    
</script>
