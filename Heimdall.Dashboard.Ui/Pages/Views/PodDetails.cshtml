<template id="pod-details">
  <div class="pl-2 pr-4 max-w-5xl mx-auto">
    
  <br/>

  <div class="flex mb-8 text-xl justify-between items-center text-gray-500 dark:text-gray-300 font-light sans">
    <div class="text-md truncate pe-2">Pod / {{pod?.metadata?.namespace }} / {{ pod?.metadata?.name }}</div>
    <div class="flex">
      <template v-if="config.canRestartPod && pod">
        <restart-pod :pod="pod"></restart-pod>  
      </template>
      <template v-if="pod?.spec?.containers.length == 1">
        <logs-btn :container="pod.spec.containers[0].name"></logs-btn>
      </template>
      <div v-else class="flex px-2 w-28"></div>
    </div>
  </div>
    
  <div v-if="config.metrics" class="my-4">
    <div class="flex justify-center mb-4">
      <div class="flex">
        <chart-toggle name="cpu" :state="chartState" label="CPU" @@update="e => chartState = e"></chart-toggle>

        <chart-toggle name="memory" :state="chartState" label="Memory" @@update="e => chartState = e"></chart-toggle>

        <chart-toggle name="network" :state="chartState" label="Network" @@update="e => chartState = e"></chart-toggle>

        <chart-toggle name="filesystem" :state="chartState" label="Filesystem" @@update="e => chartState = e"></chart-toggle>

        <chart-toggle v-if="['cpu', 'memory'].includes(chartState)" name="limit" :state="limitState" label="Limit" :state-visible="true" @@update="e => limitState = !limitState"></chart-toggle>
        <div v-else class="w-[105px] me-2"></div>
      </div>
    </div>
    
    <div class="wide-details-graph">
      <v-chart ref="chart" :option="charts[chartState]" :theme="isDark ? 'dark' : ''" :init-options="initOptions"></v-chart>
    </div>
  </div>

  <br/>

  <div class="text-gray-500 dark:text-gray-300 text-md font-light sans">
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Created</div>
      <div>{{ toLocal(pod?.metadata?.creationTimestamp) }} ({{ toHuman(pod?.metadata?.creationTimestamp) }})</div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Name</div>
      <div class="py-1">{{ pod?.metadata?.name }}</div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Namespace</div>
      <div class="py-1">{{ pod?.metadata?.namespace }}</div>
    </div>
    <div v-if="pod?.metadata?.labels" class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Labels</div>
      <div class="w-3/4 flex flex-col truncate">
        <template v-for="(v, k) in pod?.metadata?.labels">
          <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
        </template>
      </div>
    </div>
    <div v-if="pod?.metadata?.annotations" class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Annotations</div>
      <div class="w-3/4 flex flex-col truncate">
        <template v-for="(v, k) in pod?.metadata?.annotations">
          <div class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">{{ k }}: {{v}}</div>
        </template>
      </div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Controlled by</div>
      <div class="flex w-3/4 flex-wrap truncate">
        <template v-for="owner in pod?.metadata?.ownerReferences">
          <div class="py-1 flex">
            <div class="pr-2">{{ owner.kind }}:</div>
            <div class="text-blue-500">{{ owner.name }}</div>
          </div>
        </template>
      </div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Status</div>
      <div class="py-1 text-green-500">{{ pod?.status?.phase }}</div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Node</div>
      <div class="py-1 text-blue-500">{{ pod?.spec?.nodeName }}</div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Pod Ips</div>
      <div class="flex w-3/4 flex-wrap truncate">
        <template v-for="p in pod?.status?.podIPs">
          <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2 overflow-hidden">{{ p.ip }}</div>
        </template>
      </div>
    </div>            
    <div v-if="pod?.spec?.priorityClassName" class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Priority Class</div>
      <div class="py-1 text-blue-500">{{ pod?.spec?.priorityClassName }}</div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">QoS Class</div>
      <div class="py-1 text-blue-500">{{ pod?.status?.qosClass }}</div>
    </div>
    <div class="flex mb-2">
      <div class="px-2 py-1 w-1/4">Conditions</div>
      <div class="flex w-3/4 flex-wrap truncate">
        <template v-for="s in pod?.status?.conditions">
          <div v-if="s.status === 'True'"
               class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2 overflow-hidden"
          >{{s.type}}</div>
          <div v-else
               class="text-gray-400 dark:text-gray-600 bg-gray-100 dark:bg-zinc-900 rounded py-1 px-2 mr-2 mb-2 overflow-hidden"
          >{{s.type}}</div>
        </template>
      </div>
    </div>
  </div>

  <div class="flex my-4 items-center">
    <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Containers</span>
  </div>

  <div v-for="c in pod?.spec?.containers" 
       class="text-gray-500 dark:text-gray-300 text-md font-light sans rounded-lg shadow-md border border-gray-200 dark:border-zinc-800 mb-4">
    <div class="my-2">
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Container</div>
          <div class="flex justify-between items-center grow">
            <div class="py-1">{{ c.name }}</div>
            <div class="me-4">
              <logs-btn :pod="pod.metadata.name" :namespace="pod.metadata.namespace" :container="c.name" ></logs-btn>  
            </div>
          </div>
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Status</div>
          <div v-html="getContainerStatus(c.name, pod)"></div>
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Image</div>
          <div class="py-1 truncate">{{ c.image }}</div>
        </div>
        <div v-if="c.args" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Arguments</div>
          <div class="flex flex-wrap w-3/4 truncate">
            <template v-for="a in c.args">
              <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2 overflow-hidden">{{ a }}</div>
            </template>
          </div>
        </div>
        <div v-if="c.env || c.envFrom" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Environment</div>
          <div class="flex flex-col w-3/4 truncate">
            <template v-if="c.env">
              <template v-for="e in c.env">
                <div v-if="e.valueFrom?.fieldRef" class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">
                  {{ e.name }}: fieldRef({{e.valueFrom.fieldRef.apiVersion }}:{{ e.valueFrom.fieldRef.fieldPath }})
                </div>
                <div v-else-if="e.valueFrom?.secretKeyRef" title="Value and mapping hidden" 
                  class="bg-gray-200 dark:bg-zinc-800 flex w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">
                  {{ e.name }}: secret({{ e.valueFrom.secretKeyRef.name}})
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ps-1 w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m0-10.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.75c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.57-.598-3.75h-.152c-3.196 0-6.1-1.25-8.25-3.286Zm0 13.036h.008v.008H12v-.008Z" />
                  </svg>
                </div>
                <div v-else-if="e.valueFrom?.configMapKeyRef"
                  class="bg-gray-200 dark:bg-zinc-800 flex w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">
                  {{ e.name }}: configMap({{ e.valueFrom.configMapKeyRef.name}}).{{ e.valueFrom.configMapKeyRef.key}}
                </div>
                <div v-else class="bg-gray-200 dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">
                  {{ e.name }}: {{ e.value}}
                </div>
              </template>
            </template>
            <template v-if="c.envFrom">
              <div v-for="e in c.envFrom" title="Value and mapping hidden"
                class="bg-gray-200 flex dark:bg-zinc-800 w-fit rounded py-0.5 px-2 mb-1 overflow-hidden">
                {{ e.secretRef.name }} 
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="ps-1 w-6 h-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m0-10.036A11.959 11.959 0 0 1 3.598 6 11.99 11.99 0 0 0 3 9.75c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.57-.598-3.75h-.152c-3.196 0-6.1-1.25-8.25-3.286Zm0 13.036h.008v.008H12v-.008Z" />
                </svg>
              </div>
            </template>
          </div>
        </div>
        <div v-if="c.volumeMounts" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Mounts</div>
          <div class="flex flex-col w-3/4 truncate">
          <div class="w-fit">
            <div v-for="e in c.volumeMounts" 
              class="rounded py-0.5 mb-1 overflow-hidden">
              <div class="bg-gray-200 dark:bg-zinc-800 px-1">{{ e.mountPath }}</div>
              <div class="px-1">from {{ e.name}}</div>
            </div>
            </div>
          </div>
        </div>
        <div v-if="c.ports" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Ports</div>
          <div class="flex flex-wrap w-3/4 truncate">
            <template v-for="p in c.ports">
              <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2 overflow-hidden">{{p.name}}: {{ p.containerPort }}/{{ p.protocol}}</div>
            </template>
          </div>
        </div>
        <div v-if="c.livenessProbe" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Liveness</div>
          <div class="flex flex-wrap w-3/4">
            <div v-if="c.livenessProbe.httpGet" class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">
              http-get: {{ c.livenessProbe.httpGet.path }}
            </div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">Initial Delay: {{c.livenessProbe.initialDelaySeconds}}s</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">Interval: {{c.livenessProbe.periodSeconds}}s</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">Timeout: {{c.livenessProbe.timeoutSeconds}}s</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">#Failure: {{c.livenessProbe.failureThreshold}}</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">#Success: {{c.livenessProbe.successThreshold}}</div>
          </div>
        </div>
        <div v-if="c.readinessProbe" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Readiness</div>
          <div class="flex flex-wrap w-3/4">
            <div v-if="c.readinessProbe.httpGet" class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">
              http-get: {{ c.readinessProbe.httpGet.path }}
            </div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">Initial Delay: {{c.readinessProbe.initialDelaySeconds}}s</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">Interval: {{c.readinessProbe.periodSeconds}}s</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">Timeout: {{c.readinessProbe.timeoutSeconds}}s</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">#Failure: {{c.readinessProbe.failureThreshold}}</div>
            <div class="bg-gray-200 dark:bg-zinc-800 rounded py-1 px-2 mr-2 mb-2">#Success: {{c.readinessProbe.successThreshold}}</div>
          </div>
        </div>
        <div v-if="c.resources?.requests?.cpu" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Cpu Request</div>
          <div class="py-1">{{ c.resources?.requests?.cpu }}</div>
        </div>
        <div v-if="c.resources?.limits?.cpu" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Cpu Limit</div>
          <div class="py-1">{{ c.resources?.limits?.cpu }}</div>
        </div>
        <div v-if="c.resources?.requests?.memory" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Memory Request</div>
          <div class="py-1">{{ c.resources?.requests?.memory }}</div>
        </div>
        <div v-if="c.resources?.limits?.memory" class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Memory Limit</div>
          <div class="py-1">{{ c.resources?.limits?.memory }}</div>
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Last Status</div>
          <div class="py-1 w-3/4">
            <template v-for="s in getContainerStatusObjects(c.name, pod)">
              <div v-if="s.lastState.terminated">
                <div>Terminated</div>
                <div>Reason: {{ s.lastState?.terminated?.reason }} - Exit code: {{ s.lastState?.terminated?.exitCode }}</div>
                <div>Started At: {{ toLocal(s.lastState.terminated.startedAt) }} ({{ toHuman(s.lastState.terminated.startedAt) }})</div>
                <div>Finished At: {{ toLocal(s.lastState.terminated.finishedAt) }} ({{ toHuman(s.lastState.terminated.finishedAt) }})</div>
              </div>
              <div v-else-if="s.lastState.waiting">
                <div>Waiting</div>
              </div>
              <div v-else>
                <div>None</div>
              </div>
            </template>
          </div>
        </div>
      </div>
  </div>

  <br>

  <div class="flex my-4 items-center">
    <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Volumes</span>
  </div>

  <div v-for="c in pod?.spec?.volumes" 
       class="text-gray-500 dark:text-gray-300 text-md font-light sans rounded-lg shadow-md border border-gray-200 dark:border-zinc-800 mb-4">
    <div class="my-2">
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4 fill-gray-500 dark:fill-gray-300 flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 pe-2" viewBox="0 0 24 24">
              <path d="M3 20v-4h18v4zm2-1h2v-2H5zM3 8V4h18v4zm2-1h2V5H5zm-2 7v-4h18v4zm2-1h2v-2H5z"/>
            </svg>
            <div class="py-1">{{ c.name }}</div>
          </div>
          <div class="flex justify-between items-center grow">
          </div>
        </div>
        <template v-if="c.persistentVolumeClaim">
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Kind</div><div class="py-1">PersistentVolumeClaim</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Name</div>
            <div class="py-1 truncate">{{ c.persistentVolumeClaim.claimName }}</div>
          </div>
        </template>
        <template v-if="c.configMap">
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Kind</div><div class="py-1">ConfigMap</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Name</div>
            <div class="py-1 truncate">{{ c.configMap.name }}</div>
          </div>
        </template>
        <template v-if="c.emptyDir">
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Kind</div><div class="py-1">EmptyDir</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Medium</div>
            <div class="py-1 truncate">{{ c.EmptyDir?.medium ?? 'nodes default medium' }}</div>
          </div>
        </template>
        <template v-if="c.projected">
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Kind</div><div class="py-1">Projected</div>
          </div>
          <div class="flex mb-2">
            <div class="px-2 py-1 w-1/4">Sources</div>
            <div class="pt-4 flex flex-col">
              <div class="w-fit">
                <template v-for="s in c.projected.sources">
                  <template v-if="s.serviceAccountToken">
                    <div>
                      <div class="px-2 bg-gray-200 dark:bg-zinc-800">Service Account Token</div>
                      <div class="flex items-center"><div class="px-2 py-1 w-32">Expiration</div><div>{{s.serviceAccountToken.expirationSeconds}}</div></div>
                      <div class="flex items-center"><div class="px-2 py-1 w-32">Path</div><div>{{s.serviceAccountToken.path}}</div></div>
                    </div>
                  </template>
                  <template v-if="s.configMap">
                    <div>
                      <div class="px-2 bg-gray-200 dark:bg-zinc-800">Config Map</div>
                      <div class="flex items-center"><div class="px-2 py-1 w-32">Name</div><div>{{s.configMap.name}}</div></div>
                      <div v-for="i in s.configMap.items" class="flex items-center">
                        <div class="px-2 py-1 w-32">Items</div><div>{{i.key}} -> {{i.path}}</div>
                      </div>
                    </div>
                  </template>
                  <template v-if="s.downwardAPI">
                    <div>
                      <div class="px-2 bg-gray-200 dark:bg-zinc-800">Kubernetes Api</div>
                      <div v-for="i in s.downwardAPI.items" class="flex items-center">
                        <div class="px-2 py-1 w-32">Items</div><div>{{i.path}}</div>
                      </div>
                    </div>
                  </template>
                </template>
              </div>
            </div>
          </div>
        </template>
      </div>
  </div>

  <br/>

  <div v-if="events.length > 0" class="flex my-4 items-center">
    <span class="text-gray-500 dark:text-gray-300 text-2xl font-light sans">Events</span>
  </div>

  <div v-if="events.length > 0" class="text-gray-500 dark:text-gray-300 text-md font-light sans rounded-lg shadow-lg border border-gray-200 dark:border-zinc-800">
    <template v-for="event in events">
      <div class="my-3">
        <div :class="event.type === 'Warning' ? 'text-red-500' : ''"
             class="mb-2 px-4 py-1 w-full break-words">
          {{ event.message }}
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Source</div>
          <div class="py-1 w-3/4 truncate">{{event.source.host}} {{event.source.component}}</div>
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Count</div>
          <div class="py-1 w-3/4 truncate">{{ event.count }}</div>
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Sub object</div>
          <div class="py-1 w-3/4 truncate">{{ event?.involvedObject?.name }}</div>
        </div>
        <div class="flex mb-2">
          <div class="px-2 py-1 w-1/4">Last seen</div>
          <div class="py-1 w-3/4 truncate">{{ toLocal(event.lastTimestamp) }} ({{ toHuman(event.lastTimestamp) }})</div>
        </div>
      </div>
    </template>
  </div>

  <br/><br/><br/><br/>
    
  </div>
</template>

<script type="module">
import { useDark } from "@@vueuse/core";
import { useRoute } from 'vue-router'
import { ref, watch, onMounted, onUnmounted } from 'vue'

let setup = (props, ctx) => {
  const isDark = useDark();
  const route = useRoute();
  const connections = ref([]);

  const pod = ref({});

  const events = ref([]);
  const clusterEvents = ref([]);  

  const chart = ref();
  const chartState = ref('cpu');
  const limitState = ref(false);
  const initOptions = ref({ renderer: "svg" });
  
  const metrics = ref({
    cpu: [
      { 
        type:'pod', name:'cpu-usage', pods: route.params.name, namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'cores', name:'Usage', index: 1, colorDark: '#4992ff', colorLight: '#5470c6'}
      }
    ],
    memory: [
      {
        type:'pod', name:'mem-usage', pods: route.params.name, namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Usage', index: 1, colorDark: '#dd79ff', colorLight: '#ea7ccc'}
      },
    ],
    network: [
      {
        type:'pod', name:'net-recv', pods: route.params.name, namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Receive', colorDark: '#58d9f9', colorLight: '#73c0de'}
      }, 
      {
        type:'pod', name:'net-sent', pods: route.params.name, namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Transmit', colorDark: '#7cffb2', colorLight: '#91cc75'}
      }
    ],
    filesystem: [
      {
        type:'pod', name:'fs-reads', pods: route.params.name, namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Reads', colorDark: '#fddd60', colorLight: '#fac858'}
      }, 
      {
        type:'pod', name:'fs-writes', pods: route.params.name, namespace: route.params.namespace, 
        metrics: [], data: [], params: { unit: 'bytes', name:'Writes', colorDark: '#ff8a45', colorLight: '#fc8452'}
      }
    ]
  });
  
  const charts = ref({
    cpu: getSimpleChart(),
    memory: getSimpleChart(),
    network: getSimpleChart(),
    filesystem: getSimpleChart()
  });
  
  let getContainerStatusObjects = (name, pod) => {
    let containers = pod?.status?.containerStatuses?.filter(x => x.name === name);
    return containers;
  };
  
  let getContainerStatus = (name, pod) => {
    let container = pod?.status?.containerStatuses?.filter(x => x.name === name)[0];
    let status = 'Running';
    let color = 'text-green-500';
    if (container?.state?.waiting)
    {
        status = 'Waiting';
        color = 'text-orange-500';
    }
    
    return `<div class="py-1 ${color}">${status}</div>`;
  };
  
  let toLocal = (value) => {
    if (!value) return '';
    
    var DT = window.DateTime || luxon.DateTime;
    let result = DT.fromISO(String(value)).setLocale('da-dk').toFormat('y-LL-dd HH:mm:ss');
    return result;
  };
  
  let toHuman = (value) => {
    if (!value) return ''
    
    var DT = window.DateTime || luxon.DateTime;
    const unit = ["years", "days", "hours", "minutes", "seconds", "milliseconds"]
    var date = DT.now();

    var newDatetime = DT.fromISO(String(value));
    return toHumanValues(newDatetime.diff(date,  unit)).join(' ') + ' Ago';
  }

  let updateMetrics = async () => {
    if (props.config.metrics){
      streamMetrics(metrics.value.cpu, updateCpu, connections.value);
      streamMetrics(metrics.value.memory, updateMemory, connections.value);
      streamMetrics(metrics.value.network, updateNetworking, connections.value);
      streamMetrics(metrics.value.filesystem, updateFilesystem, connections.value);
    }
  }
  
  let updateCpu = () => {
    if (!metrics.value.cpu) return;
    if (metrics.value.cpu[0].metrics.length < 1) return;

    var [data, max, unit] = getDataSeries(metrics.value.cpu);

    let limit = 0;
    if (limitState.value){    
      let containers = pod.value?.spec?.containers?.map(x => cpuUnitsToNumber(x.resources?.limits?.cpu)) ?? [];
      limit = containers.reduce((a, b) => a + b, 0);
    }

    updateSimpleChart(charts.value.cpu, metrics.value.cpu, unit, isDark.value, limit);
  };
  
  let updateMemory = () => {
    if (!metrics.value.memory) return;
    if (metrics.value.memory[0].metrics.length < 1) return;

    var [data, max, unit] = getDataSeries(metrics.value.memory);
    
    let limit = 0;
    if (limitState.value){    
      let containers = pod.value?.spec?.containers?.map(x => memoryUnitToBytes(x.resources?.limits?.memory)) ?? [];
      limit = containers.reduce((a, b) => a + b, 0);
    }

    updateSimpleChart(charts.value.memory, metrics.value.memory, unit, isDark.value, limit);
  };

  let updateNetworking = () => {
    if (!metrics.value.network) return;
    if (metrics.value.network[0].metrics.length < 1) return;

    var [data, max, unit] = getDataSeries(metrics.value.network);

    updateSimpleChart(charts.value.network, metrics.value.network, unit, isDark.value);
  }

  let updateFilesystem = () => {
    if (!metrics.value.filesystem) return;
    if (metrics.value.filesystem[0].metrics.length < 1) return;

    var [data, max, unit] = getDataSeries(metrics.value.filesystem);

    updateSimpleChart(charts.value.filesystem, metrics.value.filesystem, unit, isDark.value);
  }
  
  watch(() => props.config.metrics, () => {
    updateMetrics();
  });

  watch(clusterEvents, () => {
    let name = route.params.name;
    events.value = clusterEvents.value.filter(x => x?.involvedObject?.name === name);
  });
      
  watch([limitState, chartState, isDark], () => {
    updateCpu();
    updateMemory();
    updateNetworking();
    updateFilesystem();
  })

  onMounted(async () => {
    let namespace = route.params.namespace;
    let options = { pods: name, namespace: namespace };

    updateMetrics();

    streamResult(`/k8s/api/v1/namespaces/${namespace}/pods`, route.params.name, j => pod.value = j, connections.value);
    streamResults(`/k8s/api/v1/namespaces/${namespace}/events`, j => clusterEvents.value = j, connections.value)
  });

  onUnmounted(async () => {
    closeConnections(connections.value);
  });
  
  return {
      connections, isDark, events, clusterEvents, pod, 
      metrics, charts, chartState, initOptions, limitState, 
      getContainerStatusObjects, getContainerStatus, toLocal, toHuman,
      updateCpu, updateMemory, updateNetworking, updateFilesystem, updateMetrics
  }
}

components["pod-details"] = {template: "#pod-details", props: ['config', 'filters'], setup};
routes.push({path:'/namespaces/:namespace/pods/:name/details', name:'pod-details', component: components["pod-details"]})
</script>