<!DOCTYPE html>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@ViewData["Title"]</title>
  <link rel="icon" href="/favicon.svg">
    
  <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21"></script>
  <script src="https://cdn.jsdelivr.net/npm/moment@2.29.3"></script>
  <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.4"></script>
    
  <script src="https://cdn.tailwindcss.com"></script> 

  <script>
  components = {};
  routes = [];
  nsBus = undefined;
  logBus = undefined;
  useGlobalNamespaces = undefined;
  useGlobalSearch = undefined;
  useGlobalOverlays = undefined;

  process = {env: "production"}

  tailwind.config = {
    darkMode: 'class',
    theme: {
      extend: {
        colors: {
          brand: '#326ce5',
          dark: '#0f0f0f'
        },
      }
    }
  }
  </script>
    
  <script type="importmap">
  {
    "imports": {
      "vue": "https://cdn.jsdelivr.net/npm/vue@3.4.12/dist/vue.esm-browser.js",
      "@@vue/devtools-api": "https://cdn.jsdelivr.net/npm/@@vue/devtools-api@6.6.1/lib/esm/index.min.js",

      "@@tanstack/virtual-core": "https://cdn.jsdelivr.net/npm/@@tanstack/virtual-core@3.5.0/dist/esm/index.js",
      "@@tanstack/vue-virtual": "https://cdn.jsdelivr.net/npm/@@tanstack/vue-virtual@3.5.0/dist/esm/index.js",

      "@@vueuse/shared": "https://cdn.jsdelivr.net/npm/@@vueuse/shared@10.9.0/index.mjs",
      "@@vueuse/core": "https://cdn.jsdelivr.net/npm/@@vueuse/core@10.9.0/index.mjs",

      "@@floating-ui/core": "https://cdn.jsdelivr.net/npm/@@floating-ui/core@1.6.0/dist/floating-ui.core.browser.min.mjs",
      "@@floating-ui/dom": "https://cdn.jsdelivr.net/npm/@@floating-ui/dom@1.6.3/dist/floating-ui.dom.browser.min.mjs",
      "@@floating-ui/utils/dom": "https://cdn.jsdelivr.net/npm/@@floating-ui/utils@@0.2.1/dom/floating-ui.utils.dom.esm.js",
      "@@floating-ui/vue": "https://cdn.jsdelivr.net/npm/@@floating-ui/vue@1.0.6/dist/floating-ui.vue.mjs",
      
      "vue-router": "https://cdn.jsdelivr.net/npm/vue-router@4.3.0/dist/vue-router.esm-browser.js",
      
      "vue-echarts": "https://cdn.jsdelivr.net/npm/vue-echarts@6.6.0/dist/index.esm.min.js",
      "vue-demi": "https://cdn.jsdelivr.net/npm/vue-demi@0.14.7/lib/index.mjs",
      "resize-detector": "https://cdn.jsdelivr.net/npm/resize-detector@0.3.0/esm/index.js",
      "echarts/core": "https://cdn.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.esm.min.js"
    }
  }
  </script>
  
  <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
  <script src="~/js/api.js" asp-append-version="true"></script>
  <script src="~/js/graphs.js" asp-append-version="true"></script>
  <script src="~/js/themes.js" asp-append-version="true"></script>
  <script src="~/js/site.js" asp-append-version="true"></script>
  <script src="~/js/table.js" asp-append-version="true"></script>
</head>
<body class="dark:bg-dark">

<div id="app">
  @RenderBody()
</div>

@RenderSection("VueComponents", required: false)

@RenderSection("Scripts", required: false)

<script type="module">
import { createApp, ref } from 'vue'
import { createRouter, createWebHashHistory } from 'vue-router'
import { registerTheme } from 'echarts/core'
import { default as ECharts } from 'vue-echarts'
import { useEventBus, createGlobalState, useStorage } from '@@vueuse/core'

useGlobalNamespaces = createGlobalState(() => useStorage('heimdall-namespace', []));
useGlobalSearch = createGlobalState(() => useStorage('heimdall-search', ''));
useGlobalOverlays = createGlobalState(() => ref({current: undefined, total: 0}));

nsBus = useEventBus('namespace')
logBus = useEventBus('log-search')

registerTheme('dark', getDarkTheme());  
components['v-chart'] = ECharts;

let scrollPositions = null;

let beforeEach = (to, from, next) => {
  if (scrollPositions === null){
    let stored = window.localStorage.getItem('scroll-state');
    if (stored){
      scrollPositions = JSON.parse(stored);
    } else { 
      scrollPositions = {};
    }
  }
  
  const contentEl = document.getElementById('content');
  scrollPositions[from.fullPath] = {
    top: contentEl.scrollTop,
    left: contentEl.scrollLeft
  };
  
  window.localStorage.setItem('scroll-state', JSON.stringify(scrollPositions));
  next();
}

let scrollBehavior = (to, from, savedPosition) => {
  if (to.fullPath === from.fullPath) {
    return;
  }
  
  if (scrollPositions === null){
    let stored = window.localStorage.getItem('scroll-state')
    if (stored){
      scrollPositions = JSON.parse(stored)
    } else { 
      scrollPositions = {}
    }
  }

  const contentEl = document.getElementById('content');
  console.assert(contentEl !== null, 'Scroll container not found');

  let savedPos = scrollPositions[to.fullPath]
  if (savedPos) {
    contentEl.scroll(savedPos);
  } else {    
    contentEl.scroll({
      top: 0,
      left: 0
    });
  }
}

const router = createRouter({
  history: createWebHashHistory(),
  routes,
  scrollBehavior,
})

router.beforeEach(beforeEach)

const app = createApp({
  methods: {
    updateNodes(){
      this.nodes = this.clusterNodes.map(x => x.metadata.name);
    },
    updateNamespaces(){
      let namespaces = this.clusterNamespaces.map(x => x.metadata.name);

      let result = [];
      if (this.config.filters.length > 0)
      {
        let filters = this.config.filters.split(',');
        let fstarts = filters.filter(x => x.startsWith('^')).map(x => x.replace('^', '').trim());
        let fends = filters.filter(x => x.endsWith('$')).map(x => x.replace('$', '').trim());
        let fincludes = filters.filter(x => !x.includes('^') && !x.includes('$')).map(x => x.trim()); 

        namespaces.forEach(x => {
          if (fstarts.length > 0 && fstarts.some(y => x.startsWith(y))){
            result.push(x);
            return;
          }

          if (fends.length > 0 && fends.some(y => x.endsWith(y))){
            result.push(x);
            return;
          }

          if (fincludes.length > 0 && fincludes.includes(x)){
            result.push(x);
          }
        })
      }
      else{
        result = namespaces;
      }

      result.sort();

      this.namespaces = result;
      if (this.config.filters.length > 0){
        this.filters = result;
      }
    }
  },
  data() {
      return {
        namespaces: [],
        filters: [],
        config: {},
        nodes: [],
        connections: [],
        clusterNodes: [],
        clusterNamespaces: [],
      }
    },
  watch:{
    clusterNodes(){
      this.updateNodes();
    },
    clusterNamespaces(){
      this.updateNamespaces();
    },
    config(){
      this.updateNamespaces();
    }
  },
  async mounted() {
    fetch('api/features')
      .then(r => r.json())
      .then(j => this.config = j);
      
    streamResults('/k8s/api/v1/nodes', j => this.clusterNodes = j, this.connections);
    streamResults('/k8s/api/v1/namespaces', j => this.clusterNamespaces = j, this.connections);
  },
  async beforeUnmount(){
    closeConnections(this.connections)
  }
})
Object.entries(components).forEach(([k,v]) =>{
    app.component(k, v)
});
app.use(router)
app.mount('#app');
</script>

</body>
</html>